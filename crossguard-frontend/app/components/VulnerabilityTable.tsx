'use client'

interface Vulnerability {
  probability: number
  risk_level: string
  description: string
  evidence?: string[]
}

interface VulnerabilityTableProps {
  vulnerabilities: Record<string, Vulnerability>
}

export default function VulnerabilityTable({ vulnerabilities }: VulnerabilityTableProps) {
  const formatVulnName = (name: string) => {
    return name.replace(/_/g, ' ').toUpperCase()
  }

  const getRiskClass = (level: string) => {
    switch (level) {
      case 'CRITICAL': return 'bg-red-600 text-white'
      case 'HIGH': return 'bg-orange-500 text-white'
      case 'MEDIUM': return 'bg-yellow-400 text-black'
      case 'LOW': return 'bg-green-500 text-white'
      default: return 'bg-gray-300 text-black'
    }
  }

  return (
    <div className="border-4 border-black bg-white">
      <div className="p-6">
        <h3 className="text-2xl font-bold mb-4 uppercase tracking-wide">
          Vulnerability Analysis
        </h3>
        
        <table className="vintage-table">
          <thead>
            <tr>
              <th>Vulnerability Type</th>
              <th>Probability</th>
              <th>Risk Level</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(vulnerabilities).map(([key, vuln]) => (
              <tr key={key}>
                <td className="font-bold">
                  {formatVulnName(key)}
                </td>
                <td className="font-mono">
                  {(vuln.probability * 100).toFixed(0)}%
                </td>
                <td>
                  <span className={`px-3 py-1 font-bold ${getRiskClass(vuln.risk_level)}`}>
                    {vuln.risk_level}
                  </span>
                </td>
                <td className="font-mono text-sm">
                  {vuln.description}
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Evidence Section */}
        {Object.entries(vulnerabilities).some(([_, vuln]) => vuln.evidence?.length > 0) && (
          <div className="mt-6 p-4 bg-gray-50 border-2 border-black">
            <h4 className="font-bold mb-2 uppercase">Detected Patterns:</h4>
            <div className="font-mono text-sm space-y-1">
              {Object.entries(vulnerabilities).map(([key, vuln]) => 
                vuln.evidence?.map((e, idx) => (
                  <div key={`${key}-${idx}`}>- {e}</div>
                ))
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}