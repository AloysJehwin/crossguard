'use client'

import { useState, useEffect } from 'react'

const NETWORKS = [
  { value: 'ethereum', label: 'ETHEREUM' },
  { value: 'bsc', label: 'BSC' },
  { value: 'polygon', label: 'POLYGON' },
  { value: 'avalanche', label: 'AVALANCHE' },
  { value: 'arbitrum', label: 'ARBITRUM' },
  { value: 'optimism', label: 'OPTIMISM' },
  { value: 'somnia', label: 'SOMNIA TESTNET' },
]

interface VulnerabilityScannerProps {
  onScanComplete: (results: any) => void
  isScanning: boolean
  setIsScanning: (scanning: boolean) => void
  prefilledAddress?: string
}

export default function VulnerabilityScanner({ 
  onScanComplete, 
  isScanning, 
  setIsScanning,
  prefilledAddress 
}: VulnerabilityScannerProps) {
  const [address, setAddress] = useState(prefilledAddress || '')
  const [network, setNetwork] = useState('ethereum')
  const [scanProgress, setScanProgress] = useState<string[]>([])
  const [error, setError] = useState('')

  useEffect(() => {
    if (prefilledAddress) {
      setAddress(prefilledAddress)
    }
  }, [prefilledAddress])

  const handleScan = async () => {
    if (!address) {
      setError('CONTRACT ADDRESS REQUIRED')
      return
    }

    if (!address.match(/^0x[a-fA-F0-9]{40}$/)) {
      setError('INVALID ADDRESS FORMAT')
      return
    }

    setError('')
    setIsScanning(true)
    setScanProgress([])
    onScanComplete(null)

    // Simulate scanning progress
    const progressMessages = [
      'INITIALIZING SCANNER...',
      'FETCHING CONTRACT BYTECODE...',
      'ANALYZING REENTRANCY PATTERNS...',
      'CHECKING ORACLE DEPENDENCIES...',
      'SCANNING FOR FLASH LOAN VULNERABILITIES...',
      'EXAMINING ACCESS CONTROLS...',
      'DETECTING INTEGER OVERFLOW RISKS...',
      'CALCULATING RISK SCORE...',
      'GENERATING REPORT...'
    ]

    // Display progress messages
    for (let i = 0; i < progressMessages.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 500))
      setScanProgress(prev => [...prev, progressMessages[i]])
    }

    try {
      // Call backend API
      const response = await fetch('/api/scan', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          contract_address: address,
          network: network 
        })
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.error || 'Scan failed')
      }

      onScanComplete(data)
    } catch (err: any) {
      setError(err.message || 'SCAN FAILED')
    } finally {
      setIsScanning(false)
      setScanProgress([])
    }
  }

  return (
    <div className="border-4 border-black bg-white p-8">
      <h2 className="text-2xl font-bold mb-6 uppercase tracking-wide">
        Contract Security Analysis
      </h2>

      {/* Network Selector */}
      <div className="mb-6">
        <label className="block text-sm font-bold mb-2 uppercase tracking-wide">
          Select Blockchain Network
        </label>
        <div className="grid grid-cols-4 gap-2">
          {NETWORKS.map((net) => (
            <button
              key={net.value}
              onClick={() => setNetwork(net.value)}
              className={`
                border-2 border-black p-3 font-bold uppercase tracking-wide
                transition-all duration-200
                ${network === net.value 
                  ? 'bg-black text-white' 
                  : 'bg-white text-black hover:bg-gray-100'
                }
              `}
              disabled={isScanning}
            >
              {net.label}
            </button>
          ))}
        </div>
      </div>

      {/* Address Input */}
      <div className="mb-6">
        <label className="block text-sm font-bold mb-2 uppercase tracking-wide">
          Smart Contract Address (0x...)
        </label>
        <input
          type="text"
          value={address}
          onChange={(e) => setAddress(e.target.value)}
          placeholder="0x1234567890ABCDEF..."
          className="vintage-input text-xl"
          disabled={isScanning}
        />
      </div>

      {/* Error Display */}
      {error && (
        <div className="mb-6 border-2 border-red-600 bg-red-50 p-4">
          <span className="text-red-600 font-bold">ERROR: {error}</span>
        </div>
      )}

      {/* Scan Button */}
      <button
        onClick={handleScan}
        disabled={isScanning}
        className={`vintage-button w-full text-xl ${isScanning ? 'opacity-50' : ''}`}
      >
        {isScanning ? 'SCANNING...' : 'SCAN CONTRACT'}
      </button>

      {/* Progress Terminal */}
      {isScanning && scanProgress.length > 0 && (
        <div className="mt-6 terminal-window">
          <div className="font-mono text-sm">
            {scanProgress.map((msg, idx) => (
              <div key={idx} className="mb-1">
                <span className="text-green-400">$</span> {msg}
              </div>
            ))}
            <span className="vintage-loading">_</span>
          </div>
        </div>
      )}

    </div>
  )
}